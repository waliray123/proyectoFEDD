
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import objetos.ErrorCom;
import objetos.Usuario;
import objetos.Edificio;
import objetos.Salon;
import objetos.Curso;
import objetos.Asignacion;
import objetos.Catedratico;
import objetos.Estudiante;
import objetos.Horario;
import estructuras.ListaEnlSim;
import estructuras.ListaDobEnl;
import estructuras.ListaCircDobEnl;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserSAC extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserSAC() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserSAC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserSAC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\003\002\000\002\002" +
    "\017\000\002\004\002\000\002\002\011\000\002\005\002" +
    "\000\002\002\015\000\002\006\002\000\002\002\017\000" +
    "\002\007\002\000\002\002\015\000\002\010\002\000\002" +
    "\002\015\000\002\011\002\000\002\002\025\000\002\012" +
    "\002\000\002\002\017\000\002\002\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\024\002\ufff0\013\005\014\011\015\007\016" +
    "\010\017\012\020\013\021\004\022\014\001\002\000\004" +
    "\010\126\001\002\000\004\010\112\001\002\000\004\002" +
    "\111\001\002\000\004\010\077\001\002\000\004\010\063" +
    "\001\002\000\004\010\055\001\002\000\004\010\043\001" +
    "\002\000\004\010\031\001\002\000\004\010\015\001\002" +
    "\000\004\004\016\001\002\000\004\007\017\001\002\000" +
    "\004\004\020\001\002\000\004\007\021\001\002\000\004" +
    "\004\022\001\002\000\004\007\023\001\002\000\004\004" +
    "\024\001\002\000\004\011\025\001\002\000\004\012\026" +
    "\001\002\000\024\002\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\001\002\000\024" +
    "\002\ufff0\013\005\014\011\015\007\016\010\017\012\020" +
    "\013\021\004\022\014\001\002\000\004\002\ufff1\001\002" +
    "\000\004\004\032\001\002\000\004\007\033\001\002\000" +
    "\004\005\034\001\002\000\004\007\035\001\002\000\004" +
    "\005\036\001\002\000\004\011\037\001\002\000\004\012" +
    "\040\001\002\000\024\002\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\001\002\000" +
    "\024\002\ufff0\013\005\014\011\015\007\016\010\017\012" +
    "\020\013\021\004\022\014\001\002\000\004\002\ufff5\001" +
    "\002\000\004\004\044\001\002\000\004\007\045\001\002" +
    "\000\004\005\046\001\002\000\004\007\047\001\002\000" +
    "\004\005\050\001\002\000\004\011\051\001\002\000\004" +
    "\012\052\001\002\000\024\002\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\001\002" +
    "\000\024\002\ufff0\013\005\014\011\015\007\016\010\017" +
    "\012\020\013\021\004\022\014\001\002\000\004\002\ufff7" +
    "\001\002\000\004\005\056\001\002\000\004\011\057\001" +
    "\002\000\004\012\060\001\002\000\024\002\ufffe\013\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022" +
    "\ufffe\001\002\000\024\002\ufff0\013\005\014\011\015\007" +
    "\016\010\017\012\020\013\021\004\022\014\001\002\000" +
    "\004\002\ufffd\001\002\000\004\004\064\001\002\000\004" +
    "\007\065\001\002\000\004\005\066\001\002\000\004\007" +
    "\067\001\002\000\004\004\070\001\002\000\004\007\071" +
    "\001\002\000\004\004\072\001\002\000\004\011\073\001" +
    "\002\000\004\012\074\001\002\000\024\002\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\001\002\000\024\002\ufff0\013\005\014\011\015\007" +
    "\016\010\017\012\020\013\021\004\022\014\001\002\000" +
    "\004\002\ufff9\001\002\000\004\005\100\001\002\000\004" +
    "\007\101\001\002\000\004\004\102\001\002\000\004\007" +
    "\103\001\002\000\004\004\104\001\002\000\004\011\105" +
    "\001\002\000\004\012\106\001\002\000\024\002\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\001\002\000\024\002\ufff0\013\005\014\011\015" +
    "\007\016\010\017\012\020\013\021\004\022\014\001\002" +
    "\000\004\002\ufffb\001\002\000\004\002\001\001\002\000" +
    "\004\004\113\001\002\000\004\007\114\001\002\000\004" +
    "\005\115\001\002\000\004\007\116\001\002\000\004\005" +
    "\117\001\002\000\004\007\120\001\002\000\004\006\121" +
    "\001\002\000\004\011\122\001\002\000\004\012\123\001" +
    "\002\000\024\002\000\013\000\014\000\015\000\016\000" +
    "\017\000\020\000\021\000\022\000\001\002\000\024\002" +
    "\ufff0\013\005\014\011\015\007\016\010\017\012\020\013" +
    "\021\004\022\014\001\002\000\004\002\uffff\001\002\000" +
    "\004\004\127\001\002\000\004\007\130\001\002\000\004" +
    "\005\131\001\002\000\004\007\132\001\002\000\004\005" +
    "\133\001\002\000\004\007\134\001\002\000\004\004\135" +
    "\001\002\000\004\007\136\001\002\000\004\004\137\001" +
    "\002\000\004\007\140\001\002\000\004\005\141\001\002" +
    "\000\004\007\142\001\002\000\004\004\143\001\002\000" +
    "\004\011\144\001\002\000\004\012\145\001\002\000\024" +
    "\002\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\001\002\000\024\002\ufff0\013\005" +
    "\014\011\015\007\016\010\017\012\020\013\021\004\022" +
    "\014\001\002\000\004\002\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\026\001\001\000\004\002\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\040\001\001" +
    "\000\004\002\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\052\001\001\000\004\002\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\060\001\001\000\004\002\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\074\001\001\000\004\002\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\106\001\001\000" +
    "\004\002\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\123\001\001\000\004\002\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\145\001" +
    "\001\000\004\002\146\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserSAC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserSAC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserSAC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    ListaEnlSim<ErrorCom> erroresCom;       
    ListaCircDobEnl<Edificio> edificios;
    ListaCircDobEnl<Curso> cursos;
    ListaEnlSim<Salon> salones;
    //ListaDobEnl<Usuario> usuarios; 
    ListaEnlSim<Usuario> usuarios; 
    ListaEnlSim<Estudiante> estudiantes;
    ListaEnlSim<Catedratico> catedraticos;
    ListaEnlSim<Horario> horarios;
    ListaEnlSim<Asignacion> asignaciones;

	public ParserSAC(LexerSAC lex) {
		super(lex);
        this.erroresCom = lex.getErroresCom();
        this.usuarios = new ListaEnlSim<>();
        this.edificios = new ListaCircDobEnl<>();
        this.cursos = new ListaCircDobEnl<>();
        this.salones = new ListaEnlSim<>();
        this.estudiantes = new ListaEnlSim<>();
        this.catedraticos = new ListaEnlSim<>();
        this.horarios = new ListaEnlSim<>();
        this.asignaciones = new ListaEnlSim<>();
	}

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        erroresCom.add(erroresCom,new ErrorCom("Sintactico","No se esperaba Componente",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        erroresCom.add(erroresCom,new ErrorCom("Sintactico","Error sintactico Irrecuperable",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value)));
    }

    private void insertarUsuario(String codigo, String nombre, String contrasenia, String tipo){
        Usuario usuarioIns = new Usuario();
        usuarioIns.setId(codigo);
        usuarioIns.setNombre(nombre);
        usuarioIns.setContrasenia(contrasenia);
        usuarioIns.setTipo(tipo);
        this.usuarios.add(this.usuarios,usuarioIns);
    }    

    private void insertarEdificio(String nombre){
        Edificio edificioIns = new Edificio();
        edificioIns.setNombre(nombre);
        edificios.insertar(edificioIns);
    }

    private void insertarSalon(String nombre,String numero, String capacidad){
        Salon salonIns = new Salon();
        salonIns.setNombre(nombre);
        salonIns.setNumero(numero);
        salonIns.setCapacidad(capacidad);
        this.salones.add(this.salones,salonIns);
    }

    private void insertarCurso(String codigo, String nombre, String semestre, String creditos){
        Curso cursoIns = new Curso();
        cursoIns.setCodigo(codigo);
        cursoIns.setNombre(nombre);
        cursoIns.setSemestre(semestre);
        cursoIns.setCreditos(creditos);
        this.cursos.insertar(cursoIns);
    }

    private void insertarEstudiante(String carnet, String nombre, String direccion){
        Estudiante estudianteIns = new Estudiante();
        estudianteIns.setCarnet(carnet);
        estudianteIns.setNombre(nombre);
        estudianteIns.setDireccion(direccion);
        this.estudiantes.add(this.estudiantes,estudianteIns);
    }

    private void insertarCatedratico(String identificador, String nombre, String direccion){
        Catedratico catedraticoIns = new Catedratico();
        catedraticoIns.setIdentificador(identificador);
        catedraticoIns.setNombre(nombre);
        catedraticoIns.setDireccion(direccion);
        this.catedraticos.add(this.catedraticos,catedraticoIns);
    }

    private void insertarHorarios(String codigo, String codigoSalon, String codigoCurso, String codigoEdificio, String codigoNumId, String periodo){
        Horario horarioIns = new Horario();
        horarioIns.setCodigo(codigo);
        horarioIns.setCodigoSalonStr(codigoSalon);
        horarioIns.setCodigoCursoStr(codigoCurso);
        horarioIns.setCodigoEdificioStr(codigoEdificio);
        horarioIns.setCodigoNumIdCatedStr(codigoNumId);
        horarioIns.setPeriodo(periodo);
        this.horarios.add(this.horarios,horarioIns);
    }

    private void insertarAsignacion(String carnet, String codCurso, String zona, String exFinal){
        Asignacion asignacionIns = new Asignacion();
        asignacionIns.setCarnetStr(carnet);
        asignacionIns.setCodHorarioStr(codCurso);
        asignacionIns.setZona(zona);
        asignacionIns.setExFinal(exFinal);
        this.asignaciones.add(this.asignaciones, asignacionIns);

    }
    protected int error_sync_size() {
		return 2;
	}

    public ListaEnlSim<ErrorCom> getErroresCom(){
        return this.erroresCom;
    }

    public ListaEnlSim<Usuario> getUsuarios(){
        return this.usuarios;
    }

    public ListaCircDobEnl<Edificio> getEdificios(){
        return this.edificios;
    }

    public ListaEnlSim<Salon> getSalones(){
        return this.salones;
    }

    public ListaCircDobEnl<Curso> getCursos(){
        return this.cursos;
    }

    public ListaEnlSim<Estudiante> getEstudiantes(){
        return this.estudiantes;
    }

    public ListaEnlSim<Catedratico> getCatedraticos(){
        return this.catedraticos;
    }

    public ListaEnlSim<Asignacion> getAsignaciones(){
        return this.asignaciones;
    }

    public ListaEnlSim<Horario> getHorarios(){
        return this.horarios;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserSAC$actions {
  private final ParserSAC parser;

  /** Constructor */
  CUP$ParserSAC$actions(ParserSAC parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserSAC$do_action_part00000000(
    int                        CUP$ParserSAC$act_num,
    java_cup.runtime.lr_parser CUP$ParserSAC$parser,
    java.util.Stack            CUP$ParserSAC$stack,
    int                        CUP$ParserSAC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserSAC$result;

      /* select the action based on the action number */
      switch (CUP$ParserSAC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-1)).value;
		RESULT = start_val;
              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserSAC$parser.done_parsing();
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).value;
		int contrleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int contrright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String contr = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).value;
insertarUsuario(id,nomb,contr,tipo);
              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("NT$0",1, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= USUARIO PARI NUM COMA PAL COMA PAL COMA TIPO PARD PUNTCOMA NT$0 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).value;
		int contrleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).left;
		int contrright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).right;
		String contr = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;

              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-12)), ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int nombleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).value;
insertarEdificio(nomb);
              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("NT$1",2, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= EDIFICIO PARI PAL PARD PUNTCOMA NT$1 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-1)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;

              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)), ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
		int nombleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).value;
		int numbleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int numbright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String numb = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;
		int capleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).left;
		int capright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).right;
		String cap = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).value;
insertarSalon(nomb,numb,cap);
              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("NT$2",3, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= SALON PARI PAL COMA NUM COMA NUM PARD PUNTCOMA NT$2 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-1)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).value;
		int numbleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).left;
		int numbright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).right;
		String numb = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).value;
		int capleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int capright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String cap = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;

              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
		int codleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).right;
		String cod = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).value;
		int semsleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int semsright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String sems = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;
		int credleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).left;
		int credright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).right;
		String cred = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).value;
insertarCurso(cod,nomb,sems,cred);
              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("NT$3",4, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= CURSO PARI NUM COMA PAL COMA NUM COMA NUM PARD PUNTCOMA NT$3 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-1)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).right;
		String cod = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).value;
		int semsleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).left;
		int semsright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).right;
		String sems = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).value;
		int credleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int credright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String cred = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;

              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-12)), ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT =null;
		int carnetleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).left;
		int carnetright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).right;
		String carnet = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;
		int direleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).left;
		int direright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).right;
		String dire = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).value;
insertarEstudiante(carnet,nomb,dire);
              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("NT$4",5, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= ESTUDIANTE PARI NUM COMA PAL COMA PAL PARD PUNTCOMA NT$4 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-1)).value;
		int carnetleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).left;
		int carnetright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).right;
		String carnet = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).value;
		int direleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int direright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String dire = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;

              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$5 ::= 
            {
              Object RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;
		int direleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).left;
		int direright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).right;
		String dire = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).value;
insertarCatedratico(iden,nomb,dire);
              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("NT$5",6, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= CATEDRATICO PARI NUM COMA PAL COMA PAL PARD PUNTCOMA NT$5 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).value;
		int direleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int direright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String dire = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;

              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              Object RESULT =null;
		int codleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-14)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-14)).right;
		String cod = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-14)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-12)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-12)).right;
		String per = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-12)).value;
		int dialeft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).left;
		int diaright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).right;
		String dia = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).value;
		int codCursoleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).left;
		int codCursoright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).right;
		String codCurso = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).value;
		int codSalonleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).left;
		int codSalonright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).right;
		String codSalon = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).value;
		int codEdleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int codEdright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String codEd = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;
		int numIdleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).left;
		int numIdright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).right;
		String numId = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).value;
insertarHorarios(cod,codSalon,codCurso,codEd,numId,per);
              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("NT$6",7, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio ::= HORARIO PARI NUM COMA PAL COMA PAL COMA NUM COMA NUM COMA PAL COMA NUM PARD PUNTCOMA NT$6 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-1)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-16)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-16)).right;
		String cod = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-16)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-14)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-14)).right;
		String per = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-14)).value;
		int dialeft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-12)).left;
		int diaright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-12)).right;
		String dia = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-12)).value;
		int codCursoleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).left;
		int codCursoright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).right;
		String codCurso = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).value;
		int codSalonleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).left;
		int codSalonright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).right;
		String codSalon = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).value;
		int codEdleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).left;
		int codEdright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).right;
		String codEd = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).value;
		int numIdleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int numIdright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String numId = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;

              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-18)), ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =null;
		int carnetleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).left;
		int carnetright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).right;
		String carnet = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).value;
		int codHorarioleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).left;
		int codHorarioright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).right;
		String codHorario = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).value;
		int zonaleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int zonaright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String zona = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;
		int exFinalleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).left;
		int exFinalright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).right;
		String exFinal = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-2)).value;
insertarAsignacion(carnet,codHorario,zona,exFinal);
              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("NT$7",8, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio ::= ASIGNAR PARI NUM COMA NUM COMA NUM COMA NUM PARD PUNTCOMA NT$7 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-1)).value;
		int carnetleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).left;
		int carnetright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).right;
		String carnet = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-10)).value;
		int codHorarioleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).left;
		int codHorarioright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).right;
		String codHorario = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-8)).value;
		int zonaleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).left;
		int zonaright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).right;
		String zona = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-6)).value;
		int exFinalleft = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).left;
		int exFinalright = ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).right;
		String exFinal = (String)((java_cup.runtime.Symbol) CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-4)).value;

              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.elementAt(CUP$ParserSAC$top-12)), ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserSAC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSAC$stack.peek()), RESULT);
            }
          return CUP$ParserSAC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserSAC$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserSAC$do_action(
    int                        CUP$ParserSAC$act_num,
    java_cup.runtime.lr_parser CUP$ParserSAC$parser,
    java.util.Stack            CUP$ParserSAC$stack,
    int                        CUP$ParserSAC$top)
    throws java.lang.Exception
    {
              return CUP$ParserSAC$do_action_part00000000(
                               CUP$ParserSAC$act_num,
                               CUP$ParserSAC$parser,
                               CUP$ParserSAC$stack,
                               CUP$ParserSAC$top);
    }
}

}
